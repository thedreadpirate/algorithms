<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443559465656">{:repl-history {:ide [], :local [], :remote [&quot;(+ 1 1)&quot; &quot;(defn t [] (+ 1 1))&quot; &quot;(def t [])&quot; &quot;(defn)&quot; &quot;(fn [])&quot; &quot;(fn [] )&quot; &quot;target&quot; &quot;to-sort&quot; &quot;sort&quot; &quot;(defn sort [target]\n  target)&quot; &quot;(defn sort-acc [target acc]\n  (println (str \&quot;target: \&quot; target))\n  (println (str \&quot;acc: \&quot; acc))\n  (if (seq target)\n    \&quot;true\&quot;\n    \&quot;else\&quot;))&quot; &quot;(defn sort-acc [target acc]\n  (println (str \&quot;target: \&quot; target))\n  (println (str \&quot;acc: \&quot; acc))\n  (if (seq target)\n    (sort-acc (rest target) (conj acc (first target)))\n    \&quot;else\&quot;))&quot; &quot;(defn sort-acc [target acc]\n  (println (str \&quot;target: \&quot; target))\n  (println (str \&quot;acc: \&quot; acc))\n  (if (seq target)\n    (sort-acc (rest target) (conj acc (first target)))\n    acc))&quot; &quot;(defn sorted-insert [list to-add]\n  (split-with (&gt; to-add) list))&quot; &quot;(defn sorted-insert [list to-add]\n  (split-with (partial &gt; to-add) list))&quot; &quot;(sorted-insert [3 4] 1)&quot; &quot;(defn sorted-insert [list to-add]\n  (let [{lo hi} (split-with (partial &gt; to-add) list)]\n    (concat)))&quot; &quot;(defn sorted-insert [list to-add]\n  (let [{0 lo 1 hi} (split-with (partial &gt; to-add) list)]\n    (concat)))&quot; &quot;(defn sorted-insert [list to-add]\n  (let [[lo hi] (split-with (partial &gt; to-add) list)]\n    (concat)))&quot; &quot;(defn sorted-insert [list to-add]\n  (let [[lo hi] (split-with (partial &gt; to-add) list)]\n    (concat lo hi)))&quot; &quot;(defn sorted-insert [list to-add]\n  (let [[lo hi] (split-with (partial &gt; to-add) list)]\n    (concat lo to-add hi)))&quot; &quot;(sorted-insert [0 3 4] 1)&quot; &quot;(defn sort-acc [target acc]\n  (println (str \&quot;target: \&quot; target))\n  (println (str \&quot;acc: \&quot; acc))\n  (if (seq target)\n    (sort-acc (rest target) (sorted-insert acc (first target)))\n    acc))&quot; &quot;(sort-acc to-sort [])&quot; &quot;(ns algorithms.insertionsort)&quot; &quot;(def to-sort [19 6 2 1 9 10 12 0 2 45 1])&quot; &quot;(def to-sort-l '(19 6 2 1 9 10 12 0 2 45 1))&quot; &quot;(defn sort-acc [target acc]\n  (if (seq target)\n    (sort-acc (rest target) (sorted-insert acc (first target)))\n    acc))&quot; &quot;(defn sort [target]\n  (sort-acc target []))&quot; &quot;(defn sorted-insert [list to-add]\n  (let [[lo hi] (split-with (partial &gt; to-add) list)]\n    (concat lo [to-add] hi)))&quot; &quot;(sort to-sort)&quot; &quot;(sort to-sort-l)&quot;]}}</component>
</project>